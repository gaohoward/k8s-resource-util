// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: pkg/k8sservice/protocol.proto

package k8sservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GrpcK8SService_IsValid_FullMethodName              = "/GrpcK8sService/IsValid"
	GrpcK8SService_DeployResource_FullMethodName       = "/GrpcK8sService/DeployResource"
	GrpcK8SService_GetClusterInfo_FullMethodName       = "/GrpcK8sService/GetClusterInfo"
	GrpcK8SService_FetchAllApiResources_FullMethodName = "/GrpcK8sService/FetchAllApiResources"
	GrpcK8SService_FetchGVRInstances_FullMethodName    = "/GrpcK8sService/FetchGVRInstances"
	GrpcK8SService_FetchAllNamespaces_FullMethodName   = "/GrpcK8sService/FetchAllNamespaces"
	GrpcK8SService_GetPodLog_FullMethodName            = "/GrpcK8sService/GetPodLog"
	GrpcK8SService_GetPodContainers_FullMethodName     = "/GrpcK8sService/GetPodContainers"
	GrpcK8SService_GetClusterName_FullMethodName       = "/GrpcK8sService/GetClusterName"
	GrpcK8SService_GetCRDFor_FullMethodName            = "/GrpcK8sService/GetCRDFor"
)

// GrpcK8SServiceClient is the client API for GrpcK8SService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcK8SServiceClient interface {
	IsValid(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	// DeployResource(res *common.ResourceInstanceAction, targetNs string) (types.NamespacedName, error)
	DeployResource(ctx context.Context, in *DeployResourceRequest, opts ...grpc.CallOption) (*DeployResourceReply, error)
	// GetClusterInfo() *common.ClusterInfo
	GetClusterInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ClusterInfoReply, error)
	// FetchAllApiResources(force bool) *common.ApiResourceInfo
	FetchAllApiResources(ctx context.Context, in *wrapperspb.BoolValue, opts ...grpc.CallOption) (*ApiResourceInfoReply, error)
	// FetchGVRInstances(g string, v string, r string, ns string) (*unstructured.UnstructuredList, error)
	FetchGVRInstances(ctx context.Context, in *FetchGvrRequest, opts ...grpc.CallOption) (*GvrReply, error)
	// FetchAllNamespaces() ([]string, error)
	FetchAllNamespaces(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllNamespacesReply, error)
	// GetPodLog(podRaw *unstructured.Unstructured, container string) (io.ReadCloser, error)
	GetPodLog(ctx context.Context, in *PodLogRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[wrapperspb.StringValue], error)
	// GetPodContainers(podRaw *unstructured.Unstructured) ([]string, error)
	GetPodContainers(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*GetPodContainersReply, error)
	// GetClusterName() string
	GetClusterName(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	// GetCRDFor(resEntry *common.ApiResourceEntry) (string, error)
	GetCRDFor(ctx context.Context, in *ApiResourceEntry, opts ...grpc.CallOption) (*CrdReply, error)
}

type grpcK8SServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcK8SServiceClient(cc grpc.ClientConnInterface) GrpcK8SServiceClient {
	return &grpcK8SServiceClient{cc}
}

func (c *grpcK8SServiceClient) IsValid(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, GrpcK8SService_IsValid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcK8SServiceClient) DeployResource(ctx context.Context, in *DeployResourceRequest, opts ...grpc.CallOption) (*DeployResourceReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeployResourceReply)
	err := c.cc.Invoke(ctx, GrpcK8SService_DeployResource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcK8SServiceClient) GetClusterInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ClusterInfoReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClusterInfoReply)
	err := c.cc.Invoke(ctx, GrpcK8SService_GetClusterInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcK8SServiceClient) FetchAllApiResources(ctx context.Context, in *wrapperspb.BoolValue, opts ...grpc.CallOption) (*ApiResourceInfoReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResourceInfoReply)
	err := c.cc.Invoke(ctx, GrpcK8SService_FetchAllApiResources_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcK8SServiceClient) FetchGVRInstances(ctx context.Context, in *FetchGvrRequest, opts ...grpc.CallOption) (*GvrReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GvrReply)
	err := c.cc.Invoke(ctx, GrpcK8SService_FetchGVRInstances_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcK8SServiceClient) FetchAllNamespaces(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllNamespacesReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AllNamespacesReply)
	err := c.cc.Invoke(ctx, GrpcK8SService_FetchAllNamespaces_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcK8SServiceClient) GetPodLog(ctx context.Context, in *PodLogRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[wrapperspb.StringValue], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GrpcK8SService_ServiceDesc.Streams[0], GrpcK8SService_GetPodLog_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PodLogRequest, wrapperspb.StringValue]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GrpcK8SService_GetPodLogClient = grpc.ServerStreamingClient[wrapperspb.StringValue]

func (c *grpcK8SServiceClient) GetPodContainers(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*GetPodContainersReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPodContainersReply)
	err := c.cc.Invoke(ctx, GrpcK8SService_GetPodContainers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcK8SServiceClient) GetClusterName(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, GrpcK8SService_GetClusterName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcK8SServiceClient) GetCRDFor(ctx context.Context, in *ApiResourceEntry, opts ...grpc.CallOption) (*CrdReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CrdReply)
	err := c.cc.Invoke(ctx, GrpcK8SService_GetCRDFor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrpcK8SServiceServer is the server API for GrpcK8SService service.
// All implementations must embed UnimplementedGrpcK8SServiceServer
// for forward compatibility.
type GrpcK8SServiceServer interface {
	IsValid(context.Context, *emptypb.Empty) (*wrapperspb.BoolValue, error)
	// DeployResource(res *common.ResourceInstanceAction, targetNs string) (types.NamespacedName, error)
	DeployResource(context.Context, *DeployResourceRequest) (*DeployResourceReply, error)
	// GetClusterInfo() *common.ClusterInfo
	GetClusterInfo(context.Context, *emptypb.Empty) (*ClusterInfoReply, error)
	// FetchAllApiResources(force bool) *common.ApiResourceInfo
	FetchAllApiResources(context.Context, *wrapperspb.BoolValue) (*ApiResourceInfoReply, error)
	// FetchGVRInstances(g string, v string, r string, ns string) (*unstructured.UnstructuredList, error)
	FetchGVRInstances(context.Context, *FetchGvrRequest) (*GvrReply, error)
	// FetchAllNamespaces() ([]string, error)
	FetchAllNamespaces(context.Context, *emptypb.Empty) (*AllNamespacesReply, error)
	// GetPodLog(podRaw *unstructured.Unstructured, container string) (io.ReadCloser, error)
	GetPodLog(*PodLogRequest, grpc.ServerStreamingServer[wrapperspb.StringValue]) error
	// GetPodContainers(podRaw *unstructured.Unstructured) ([]string, error)
	GetPodContainers(context.Context, *wrapperspb.StringValue) (*GetPodContainersReply, error)
	// GetClusterName() string
	GetClusterName(context.Context, *emptypb.Empty) (*wrapperspb.StringValue, error)
	// GetCRDFor(resEntry *common.ApiResourceEntry) (string, error)
	GetCRDFor(context.Context, *ApiResourceEntry) (*CrdReply, error)
	mustEmbedUnimplementedGrpcK8SServiceServer()
}

// UnimplementedGrpcK8SServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGrpcK8SServiceServer struct{}

func (UnimplementedGrpcK8SServiceServer) IsValid(context.Context, *emptypb.Empty) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsValid not implemented")
}
func (UnimplementedGrpcK8SServiceServer) DeployResource(context.Context, *DeployResourceRequest) (*DeployResourceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeployResource not implemented")
}
func (UnimplementedGrpcK8SServiceServer) GetClusterInfo(context.Context, *emptypb.Empty) (*ClusterInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterInfo not implemented")
}
func (UnimplementedGrpcK8SServiceServer) FetchAllApiResources(context.Context, *wrapperspb.BoolValue) (*ApiResourceInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchAllApiResources not implemented")
}
func (UnimplementedGrpcK8SServiceServer) FetchGVRInstances(context.Context, *FetchGvrRequest) (*GvrReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchGVRInstances not implemented")
}
func (UnimplementedGrpcK8SServiceServer) FetchAllNamespaces(context.Context, *emptypb.Empty) (*AllNamespacesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchAllNamespaces not implemented")
}
func (UnimplementedGrpcK8SServiceServer) GetPodLog(*PodLogRequest, grpc.ServerStreamingServer[wrapperspb.StringValue]) error {
	return status.Errorf(codes.Unimplemented, "method GetPodLog not implemented")
}
func (UnimplementedGrpcK8SServiceServer) GetPodContainers(context.Context, *wrapperspb.StringValue) (*GetPodContainersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPodContainers not implemented")
}
func (UnimplementedGrpcK8SServiceServer) GetClusterName(context.Context, *emptypb.Empty) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterName not implemented")
}
func (UnimplementedGrpcK8SServiceServer) GetCRDFor(context.Context, *ApiResourceEntry) (*CrdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCRDFor not implemented")
}
func (UnimplementedGrpcK8SServiceServer) mustEmbedUnimplementedGrpcK8SServiceServer() {}
func (UnimplementedGrpcK8SServiceServer) testEmbeddedByValue()                        {}

// UnsafeGrpcK8SServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcK8SServiceServer will
// result in compilation errors.
type UnsafeGrpcK8SServiceServer interface {
	mustEmbedUnimplementedGrpcK8SServiceServer()
}

func RegisterGrpcK8SServiceServer(s grpc.ServiceRegistrar, srv GrpcK8SServiceServer) {
	// If the following call pancis, it indicates UnimplementedGrpcK8SServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GrpcK8SService_ServiceDesc, srv)
}

func _GrpcK8SService_IsValid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcK8SServiceServer).IsValid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcK8SService_IsValid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcK8SServiceServer).IsValid(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcK8SService_DeployResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcK8SServiceServer).DeployResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcK8SService_DeployResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcK8SServiceServer).DeployResource(ctx, req.(*DeployResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcK8SService_GetClusterInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcK8SServiceServer).GetClusterInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcK8SService_GetClusterInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcK8SServiceServer).GetClusterInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcK8SService_FetchAllApiResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.BoolValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcK8SServiceServer).FetchAllApiResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcK8SService_FetchAllApiResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcK8SServiceServer).FetchAllApiResources(ctx, req.(*wrapperspb.BoolValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcK8SService_FetchGVRInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchGvrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcK8SServiceServer).FetchGVRInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcK8SService_FetchGVRInstances_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcK8SServiceServer).FetchGVRInstances(ctx, req.(*FetchGvrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcK8SService_FetchAllNamespaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcK8SServiceServer).FetchAllNamespaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcK8SService_FetchAllNamespaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcK8SServiceServer).FetchAllNamespaces(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcK8SService_GetPodLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PodLogRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GrpcK8SServiceServer).GetPodLog(m, &grpc.GenericServerStream[PodLogRequest, wrapperspb.StringValue]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GrpcK8SService_GetPodLogServer = grpc.ServerStreamingServer[wrapperspb.StringValue]

func _GrpcK8SService_GetPodContainers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcK8SServiceServer).GetPodContainers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcK8SService_GetPodContainers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcK8SServiceServer).GetPodContainers(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcK8SService_GetClusterName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcK8SServiceServer).GetClusterName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcK8SService_GetClusterName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcK8SServiceServer).GetClusterName(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcK8SService_GetCRDFor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiResourceEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcK8SServiceServer).GetCRDFor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcK8SService_GetCRDFor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcK8SServiceServer).GetCRDFor(ctx, req.(*ApiResourceEntry))
	}
	return interceptor(ctx, in, info, handler)
}

// GrpcK8SService_ServiceDesc is the grpc.ServiceDesc for GrpcK8SService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrpcK8SService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GrpcK8sService",
	HandlerType: (*GrpcK8SServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsValid",
			Handler:    _GrpcK8SService_IsValid_Handler,
		},
		{
			MethodName: "DeployResource",
			Handler:    _GrpcK8SService_DeployResource_Handler,
		},
		{
			MethodName: "GetClusterInfo",
			Handler:    _GrpcK8SService_GetClusterInfo_Handler,
		},
		{
			MethodName: "FetchAllApiResources",
			Handler:    _GrpcK8SService_FetchAllApiResources_Handler,
		},
		{
			MethodName: "FetchGVRInstances",
			Handler:    _GrpcK8SService_FetchGVRInstances_Handler,
		},
		{
			MethodName: "FetchAllNamespaces",
			Handler:    _GrpcK8SService_FetchAllNamespaces_Handler,
		},
		{
			MethodName: "GetPodContainers",
			Handler:    _GrpcK8SService_GetPodContainers_Handler,
		},
		{
			MethodName: "GetClusterName",
			Handler:    _GrpcK8SService_GetClusterName_Handler,
		},
		{
			MethodName: "GetCRDFor",
			Handler:    _GrpcK8SService_GetCRDFor_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetPodLog",
			Handler:       _GrpcK8SService_GetPodLog_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/k8sservice/protocol.proto",
}
